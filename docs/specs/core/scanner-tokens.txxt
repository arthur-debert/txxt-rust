:: title :: txxt Scanner Tokens Reference
:: author :: Arthur Debert
:: pub-date :: 2025-01-12

This document defines the low-level scanner tokens used in the txxt format. These are the atomic tokens that form the foundation of the txxt parsing pipeline, produced by the lexer and consumed by the semantic token parsing stage.


- Scanner Tokens [./scanner-tokens.txxt] defines the low-level scanner tokens (this document)
- Semantic Tokens: [./semantic-tokens.txxt] defines semantic node types
- Grammer [./grammar.txxt] defines how blocks are constructed from semantic tokens

1. Token Hierarchy

    txxt syntax is built from small, composable tokens that combine into increasingly complex structures. The hierarchy follows this pattern:

    Characters → Scanner Tokens → Semantic Tokens → Blocks → Documents

    1.1. Character Level

        Basic character classes and escaping rules form the foundation:

        Character classes:
            <whitespace> = [ \t\s]
            <letter> = [a-zA-Z]
            <digit> = [0-9]
            <alphanumeric> = <letter> | <digit>
            <line-break> = \n
            <any-char> = .
        :: grammar

        Escaping:
            <escaped-char> = \ <any-char>
            <literal-char> = <any-char> - [*_`#\[\]@:]
        :: grammar

        The backslash removes special meaning from any following character.

    1.2. Basic Scanner Tokens

        Atomic tokens that cannot be decomposed further:

        Text tokens:
            <text-char> = <literal-char> | <escaped-char>
            <text-span> = <text-char>+
            <identifier> = <letter> (<alphanumeric> | [._-])*
        :: grammar

        Structural tokens:
            <blank-line> = <whitespace>* <line-break>
            <indent> = <whitespace>{4}
            <line-break> = \n
        :: grammar

        Marker tokens:
            <dash> = -
            <period> = .
            <colon> = :
            <double-colon> = ::
            <asterisk> = *
            <underscore> = _
            <backtick> = `
            <hash> = #
            <left-bracket> = [
            <right-bracket> = ]
            <left-paren> = (
            <right-paren> = )
            <at-sign> = @
            <caret> = ^
        :: grammar

    1.3. txxt Marker

        The double colon is the fundamental txxt marker used across multiple elements:

        <txxt-marker> = <double-colon>
        :: grammar

        Usage contexts:
        - Annotations: `:: label :: content`
        - Definitions: `Term ::`
        - Verbatim labels: `:: label`
        - Parameters: `label:key=value:` (single colon + txxt marker)

2. Span Elements

    Inline elements that format or reference text within lines:

    2.1. Text Spans

        Plain text content without special formatting:

        <text-content> = <text-span> (<whitespace> <text-span>)*
        :: grammar

    2.2. Formatting Spans

        Paired markers that apply formatting to enclosed text:

        Bold text:
            <bold-span> = <asterisk> <text-content> <asterisk>
        :: grammar

        Italic text:
            <italic-span> = <underscore> <text-content> <underscore>
        :: grammar

        Code text:
            <code-span> = <backtick> <text-content> <backtick>
        :: grammar

        Math text:
            <math-span> = <hash> <text-content> <hash>
        :: grammar

        Constraints:
        - No whitespace between markers and content
        - Cannot span multiple lines
        - Can be nested but not overlapped

    2.3. Reference Spans

        Links and citations using bracket notation:

        Basic reference:
            <reference-content> = (<text-char> - [[\]])+
            <reference-span> = <left-bracket> <reference-content> <right-bracket>
        :: grammar

        Citation reference:
            <citation-key> = <identifier>
            <citation-keys> = <citation-key> (, <citation-key>)*
            <page-number> = <digit>+
            <page-range> = <page-number> (- <page-number>)?
            <page-list> = <page-range> (, <page-range>)*
            <page-locator> = p <period>? <page-list> | pp <period>? <page-list>
            <citation-locator> = , <whitespace>* <page-locator>
            <citation-span> = <left-bracket> <at-sign> <citation-keys> <citation-locator>? <right-bracket>
        :: grammar

        Page reference:
            <page-ref> = <left-bracket> <page-locator> <right-bracket>
        :: grammar

        Session reference:
            <session-number> = <digit>+ (<period> <digit>+)*
            <session-ref> = <left-bracket> <hash> <session-number> <right-bracket>
        :: grammar

        Footnote reference:
            <footnote-number> = <digit>+
            <footnote-label> = <identifier>
            <footnote-naked> = <left-bracket> <footnote-number> <right-bracket>
            <footnote-labeled> = <left-bracket> ^ <footnote-label> <right-bracket>
            <footnote-ref> = <footnote-naked> | <footnote-labeled>
        :: grammar

3. Line Elements

    Complete lines that form the building blocks of document structure:

    3.1. Text Lines

        Lines containing span elements:

        <span-element> = <text-span> | <bold-span> | <italic-span> | <code-span> | <math-span> | <reference-span> | <citation-span> | <page-ref> | <session-ref> | <footnote-ref>
        <text-line> = <span-element> (<whitespace> <span-element>)* <line-break>
        :: grammar

    3.2. Structural Lines

        Lines that define document structure:

        Blank line:
            <blank-line> = <whitespace>* <line-break>
        :: grammar

4. Block Markers

    Tokens that identify specific block types:

    4.1. List Markers

        Sequence markers that start list items, grouped by list style:

        Plain style marker:
            <plain-marker> = <dash> <whitespace>
        :: grammar

        Numerical style markers:
            <number> = <digit>+
            <hierarchical-number> = <digit>+ (<period> <digit>+)*
            <numerical-marker> = <number> <period> <whitespace>
            <hierarchical-numerical-marker> = <hierarchical-number> <period> <whitespace>
            <numerical-paren-marker> = <number> <right-paren> <whitespace>
        :: grammar

        Alphabetical style markers:
            <letter-lower> = [a-z]
            <letter-upper> = [A-Z]
            <alphabetical-marker> = (<letter-lower> | <letter-upper>) <period> <whitespace>
            <alphabetical-paren-marker> = (<letter-lower> | <letter-upper>) <right-paren> <whitespace>
        :: grammar

        Roman style markers:
            <roman-lower> = i | ii | iii | iv | v | vi | vii | viii | ix | x
            <roman-upper> = I | II | III | IV | V | VI | VII | VIII | IX | X
            <roman-marker> = (<roman-lower> | <roman-upper>) <period> <whitespace>
            <roman-paren-marker> = (<roman-lower> | <roman-upper>) <right-paren> <whitespace>
        :: grammar

        Complete sequence marker:
            <sequence-marker> = <plain-marker> | <numerical-marker> | <hierarchical-numerical-marker> | <numerical-paren-marker> | <alphabetical-marker> | <alphabetical-paren-marker> | <roman-marker> | <roman-paren-marker>
        :: grammar

    4.2. Annotation Markers

        txxt markers for metadata:

        <annotation-marker> = <txxt-marker>
        :: grammar

    4.3. Verbatim Markers

        Markers for preserved content blocks:

        <label> = <identifier> (<period> <identifier>)*
        <verbatim-start> = <colon> <whitespace>* <line-break>
        <verbatim-label-line> = <txxt-marker> <label> <line-break>
        <verbatim-param-label-line> = <txxt-marker> <label> <colon> <parameter-list> <line-break>
        <verbatim-end> = <verbatim-label-line> | <verbatim-param-label-line>
        :: grammar

    4.4. Definition Markers

        txxt markers at end of line:

        <definition-marker> = <whitespace>* <txxt-marker> <whitespace>* <line-break>
        :: grammar

5. Parameters

    Key-value metadata syntax used in annotations and verbatim blocks:

    5.1. Parameter Syntax

        Basic parameter structure:

        <parameter-key> = <identifier> (<period> <identifier>)*
        <parameter-value> = <text-content> | <quoted-string>
        <quoted-string> = " (<text-char> | <escaped-char>)* "
        <parameter-pair> = <parameter-key> = <parameter-value>
        <parameter-list> = <parameter-pair> (, <whitespace>* <parameter-pair>)*
        :: grammar

    5.2. Parameter Integration

        How parameters integrate with annotations and verbatim blocks:

        Parameterized annotation:
            <param-annotation> = <txxt-marker> <annotation-label> <colon> <parameter-list> <txxt-marker> <annotation-content>?
        :: grammar

        Parameterized verbatim:
            <param-verbatim-end> = <txxt-marker> <identifier> <colon> <parameter-list> <line-break>
        :: grammar

6. Precedence and Disambiguation

    Rules for resolving conflicts when multiple interpretations are possible:

    6.1. Token Precedence

        Order of token recognition (first match wins):

        1. Escaped characters (highest precedence)
        2. Verbatim block boundaries
        3. Annotation markers
        4. Sequence markers
        5. Reference spans
        6. Formatting spans
        7. Text spans (lowest precedence)

7. Error Handling

    How the parser handles malformed or ambiguous input:

    7.1. Graceful Degradation

        When syntax is malformed, fall back to simpler interpretation:

        - Invalid annotation → Paragraph
        - Incomplete formatting → Literal text
        - Malformed list → Paragraph
        - Unclosed verbatim → Paragraph

    7.2. Recovery Strategies

        Methods for continuing parsing after errors:

        - Skip malformed tokens and continue
        - Close incomplete structures at block boundaries
        - Preserve all content as text when structure unclear
        - Never fail completely - always produce output

:: note :: This scanner tokens reference defines the low-level tokens for txxt. For semantic constructs and block grammar, see the semantic-tokens.txxt and grammar.txxt documents.
