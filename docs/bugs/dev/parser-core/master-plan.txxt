Master Plan

We are finally ready to being the actual core parser impelmentation.
This has been a long time coming, and takes some very hard learnings over several failed implmenations.

The key tenentes are: 
    - Ensure spec correcntess
    - Ensure txxt source spec compliance
    - Work incrementatlly over node types, complexity and combinatorial
    - Support tooling for tests, inpections
    - Above ALL: consistency and mirrored naming and structuring between specs, syntax, files & tests  (1o1 absolute correspondence is not possible but a goal.)
    - No skipping of steps.
    - As issues are confirmed in lower layers (spec, tokenizer), must go back fix at source, review update outer layers. 

The work will take several releases (1st level, like Perparatory, Implementation, Reference), each with it's own milestones (second level, like AST Capabilities, Inpsection) and steps (third level.)

Each milestone requires a pr, where steps are commits. 
Each milestone will be merged into main (no backwards compatibility to ensure), which will guarantee a mergable result.

Test suite must be passing at all times. 
No peeking (antecipating and implementatin future work, especially broken parital ones.)
1. Preparatory Work
    1.1. Ast Capabilities
    1.2 Inpection: 
        1.2.1.1 Tag ast format
        1.2.1.2 tree-view format
    1.3 Tooling for assertions
        1.3.1 Base ast assertion code
        1.3.2 Per element ast assertion 
    1.4 Dataset generation and validation
        1.4.1 Per elemnt corpora tagging and listing
        1.4.2 Ensamble document corporat creation and listing
2. Parser Implementation: 
    2.1 Valid Input:
        2.1.1 Isolated element, simpler form
        2.1.2 Isolated element, complex form
        2.1.2 Container Elements: flat
        2.1.3 Container Elements: nested
        2.1.4 Elements, nested, comples
        2.1.5 Session Container: flat
        2.1.6 Session Container: nested
        2.1.7 Hard Edge Cases
        2.1.8.Inline Elements, Simpe (except References)
        2.1.9 Inline Elements, Complex (except References)
        2.1.10 Reference Targets Simple
        2.1.10 Reference Targets Complex
    2.2. Invalid Input: 
        2.2.1. Labels 
        2.2.2. Parameters
        2.2.3. Definitions
        2.2.4. Annotations
        2.2.5. Verbatim
        2.2.6. Nested Lists
        2.2.7. Sessions
        2.2.8. Indentation
    2.3 Document Ensamble state
        2.3.1 Simple doc properties
        2.3.1 Annotation Attachment
3. Refernce AST Data Gen: 
    3.1 Crete datasets of validated corpora as tokens, nested tokens, ast and tree view.

Rule: 
1. PRS are named Parser <release-number>-<milestone-number> Title
2. PRS merge to main, must reference the gh issues for auto close
3. Commit messages have full qualified step numbers: Parser 2.1.2 Paragraphs 
4. Github issues for milestone levels.
5.  Progress is registred on gh issues