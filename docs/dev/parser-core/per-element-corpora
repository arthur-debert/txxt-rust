Parser 1.4.1 Spec Sample Tagging System

Complete labeling scheme for all spec samples that will be extracted as test corpora by tests/corpora.rs.

1. Overview

    The txxt corpora system extracts test cases from specification documents by identifying verbatim blocks with specially formatted labels. This document defines the consistent labeling scheme for all spec samples.

2. Label Format

    2.1. Label Structure

        All corpus labels follow this pattern:
            txxt.core.spec.<element>.<validity>.<testcase>
        
        Components:
        - txxt.core.spec: Fixed prefix for all spec-based corpora
        - element: The element being tested (paragraph, list, definition, etc.)
        - validity: valid, invalid, or edge
        - testcase: Specific test scenario (simple, multiline, nested, etc.)

    2.2. Element Names

        Element identifiers (alphabetical):
        - annotation: Annotation blocks
        - container: Container elements (content/session)
        - definition: Definition blocks
        - formatting: Inline formatting (bold, italic, code, math)
        - label: Label system
        - list: List blocks
        - parameter: Parameter system
        - paragraph: Paragraph blocks
        - reference: Inline references (all types)
        - session: Session blocks
        - verbatim: Verbatim blocks

    2.3. Validity Categories

        - valid: Correct syntax that should parse successfully
        - invalid: Incorrect syntax that should fail parsing
        - edge: Boundary cases and disambiguation scenarios

3. Per-Element Labeling Scheme
    3.1. Paragraph Element
        Valid cases:
        - txxt.core.spec.paragraph.valid.simple
        - txxt.core.spec.paragraph.valid.multiline
        - txxt.core.spec.paragraph.valid.with-formatting
        - txxt.core.spec.paragraph.valid.starts-with-dash
        Edge cases:
        - txxt.core.spec.paragraph.edge.whitespace-only
        - txxt.core.spec.paragraph.edge.consistent-indent
        
        Invalid cases:
        - txxt.core.spec.paragraph.invalid.inconsistent-indent
        - txxt.core.spec.paragraph.invalid.broken-inline

    3.2. List Element

        Valid cases - basic:
        - txxt.core.spec.list.valid.plain-flat
        - txxt.core.spec.list.valid.numerical-flat
        - txxt.core.spec.list.valid.alphabetical-flat
        - txxt.core.spec.list.valid.roman-flat
        
        Valid cases - nested:
        - txxt.core.spec.list.valid.nested-mixed-styles
        - txxt.core.spec.list.valid.nested-single-item
        
        Valid cases - advanced:
        - txxt.core.spec.list.valid.templated
        - txxt.core.spec.list.valid.inconsistent-numbering
        
        Edge cases:
        - txxt.core.spec.list.edge.single-item-top-level
        
        Invalid cases:
        - txxt.core.spec.list.invalid.blank-lines-between

    3.3. Definition Element

        Valid cases - simple:
        - txxt.core.spec.definition.valid.simple-term
        - txxt.core.spec.definition.valid.multiline-content
        - txxt.core.spec.definition.valid.formatted-term
        
        Valid cases - complex:
        - txxt.core.spec.definition.valid.rich-content
        - txxt.core.spec.definition.valid.nested-definitions
        
        Invalid cases:
        - txxt.core.spec.definition.invalid.empty-term
        - txxt.core.spec.definition.invalid.no-content
        - txxt.core.spec.definition.invalid.inline-content

    3.4. Verbatim Element

        Valid cases - inflow:
        - txxt.core.spec.verbatim.valid.inflow-basic
        - txxt.core.spec.verbatim.valid.inflow-no-title
        - txxt.core.spec.verbatim.valid.inflow-empty-lines-start
        - txxt.core.spec.verbatim.valid.inflow-empty-lines-middle
        - txxt.core.spec.verbatim.valid.inflow-empty-lines-end
        
        Valid cases - complex:
        - txxt.core.spec.verbatim.valid.stretched-basic
        - txxt.core.spec.verbatim.valid.stretched-wide-table
        
        Valid cases - comples:
        - txxt.core.spec.verbatim.valid.simple-label
        - txxt.core.spec.verbatim.valid.namespaced-label
        - txxt.core.spec.verbatim.valid.with-parameters
        - txxt.core.spec.verbatim.valid.empty-content
        
        Invalid cases:
        - txxt.core.spec.verbatim.invalid.missing-label
        - txxt.core.spec.verbatim.invalid.empty-label
        - txxt.core.spec.verbatim.invalid.wrong-indent-wall

    3.5. Annotation Element

        Valid cases - simple:
        - txxt.core.spec.annotation.valid.inline-simple
        - txxt.core.spec.annotation.valid.block-multiline
        - txxt.core.spec.annotation.valid.empty-content
        
        Valid cases - parameters:
        - txxt.core.spec.annotation.valid.simple-params
        - txxt.core.spec.annotation.valid.complex-params
        
        Valid cases - document level:
        - txxt.core.spec.annotation.valid.document-level
        
        Valid cases - attachment:
        - txxt.core.spec.annotation.valid.next-element-attachment
        - txxt.core.spec.annotation.valid.no-blank-line
        
        Invalid cases:
        - txxt.core.spec.annotation.invalid.empty-label
        - txxt.core.spec.annotation.invalid.incomplete-syntax

    3.6. Session Element

        Valid cases - simple:
        - txxt.core.spec.session.valid.unnumbered-basic
        - txxt.core.spec.session.valid.numbered-basic
        - txxt.core.spec.session.valid.hierarchical
        
        Valid cases - flat:
        - txxt.core.spec.session.valid.flat-one-child
        - txxt.core.spec.session.valid.flat-two-children
        - txxt.core.spec.session.valid.flat-multiple-elements
        
        Valid cases - nested:
        - txxt.core.spec.session.valid.nested-simple
        - txxt.core.spec.session.valid.nested-deep
        - txxt.core.spec.session.valid.mixed-numbering-styles
        
        Edge cases:
        - txxt.core.spec.session.edge.vs-paragraph
        
        Invalid cases:
        - txxt.core.spec.session.invalid.no-content
        - txxt.core.spec.session.invalid.missing-blank-line

    3.7. Label System

        Valid cases:
        - txxt.core.spec.label.valid.simple-identifier
        - txxt.core.spec.label.valid.namespaced
        - txxt.core.spec.label.valid.programming-languages
        
        Invalid cases:
        - txxt.core.spec.label.invalid.starts-with-digit
        - txxt.core.spec.label.invalid.ends-with-period
        - txxt.core.spec.label.invalid.double-period

    3.8. Parameter System

        Valid cases - simple:
        - txxt.core.spec.parameter.valid.simple-key-value
        - txxt.core.spec.parameter.valid.multiple-params
        - txxt.core.spec.parameter.valid.no-quoting
        
        Valid cases - quoting:
        - txxt.core.spec.parameter.valid.quoted-with-spaces
        - txxt.core.spec.parameter.valid.quoted-with-commas
        - txxt.core.spec.parameter.valid.escaped-quotes
        - txxt.core.spec.parameter.valid.escaped-backslash
        
        Valid cases - advanced:
        - txxt.core.spec.parameter.valid.namespaced-keys
        - txxt.core.spec.parameter.valid.unicode-values
        - txxt.core.spec.parameter.valid.boolean-shorthand
        
        Invalid cases:
        - txxt.core.spec.parameter.invalid.unbalanced-quotes
        - txxt.core.spec.parameter.invalid.duplicate-keys
        - txxt.core.spec.parameter.invalid.invalid-key-name

    3.9. Container Elements

        Valid cases - content container flat:
        - txxt.core.spec.container.valid.paragraphs-and-blanks
        - txxt.core.spec.container.valid.paragraphs-and-list
        - txxt.core.spec.container.valid.paragraphs-and-annotation
        
        Valid cases - nested:
        - txxt.core.spec.container.valid.nested-definitions
        - txxt.core.spec.container.valid.nested-lists
        - txxt.core.spec.container.valid.mixed-nested-lists
        - txxt.core.spec.container.valid.nested-lists-with-content

    3.10. Inline Formatting

        Valid cases - simple:
        - txxt.core.spec.formatting.valid.bold-simple
        - txxt.core.spec.formatting.valid.italic-simple
        - txxt.core.spec.formatting.valid.code-simple
        - txxt.core.spec.formatting.valid.math-simple
        
        Valid cases - nested:
        - txxt.core.spec.formatting.valid.nested-bold-italic
        - txxt.core.spec.formatting.valid.nested-complex
        
        Valid cases - advanced:
        - txxt.core.spec.formatting.valid.unicode-content
        - txxt.core.spec.formatting.valid.escaped-chars
        
        Edge cases:
        - txxt.core.spec.formatting.edge.adjacent-elements
        - txxt.core.spec.formatting.edge.code-literal-content
        
        Invalid cases:
        - txxt.core.spec.formatting.invalid.unclosed
        - txxt.core.spec.formatting.invalid.spans-lines

    3.11. Inline References

        Valid cases - urls:
        - txxt.core.spec.reference.valid.url-http
        - txxt.core.spec.reference.valid.url-https
        - txxt.core.spec.reference.valid.url-simple-domain
        
        Valid cases - paths:
        - txxt.core.spec.reference.valid.path-relative
        - txxt.core.spec.reference.valid.path-absolute
        
        Valid cases - session refs:
        - txxt.core.spec.reference.valid.session-numbered
        - txxt.core.spec.reference.valid.session-hierarchical
        - txxt.core.spec.reference.valid.session-negative
        
        Valid cases - footnotes:
        - txxt.core.spec.reference.valid.footnote-numeric
        - txxt.core.spec.reference.valid.footnote-labeled
        
        Valid cases - citations:
        - txxt.core.spec.reference.valid.citation-single
        - txxt.core.spec.reference.valid.citation-multiple
        - txxt.core.spec.reference.valid.citation-with-locator
        
        Valid cases - advanced:
        - txxt.core.spec.reference.valid.unicode-target
        - txxt.core.spec.reference.valid.escaped-chars

4. Tagging Guidelines

    4.1. When to Tag

        Tag a sample when it:
        - Demonstrates valid syntax for an element
        - Shows an invalid case that should fail parsing
        - Illustrates a boundary/disambiguation scenario
        - Provides a complete, parseable example
        
        Do not tag:
        - Incomplete syntax fragments
        - Pseudo-code or grammar definitions
        - Examples that are purely explanatory

    4.2. How to Tag

        Format for verbatim blocks:
            Example title:
                example content here
                can be multiple lines
            :: txxt.core.spec.element.validity.testcase ::
        
        With parameters (for error cases):
            Error case title:
                invalid content here
            :: txxt.core.spec.element.invalid.testcase:error="ErrorType",message="Description" ::

    4.3. Sample Extraction

        The corpora.rs system will:
        - Find all labels matching txxt.core.spec.*
        - Extract the verbatim content between title and label
        - Remove base indentation (wall)
        - Make available to tests via TxxtCorpora::load()

5. Implementation Status

    5.1. Current State

        Files reviewed:
        - paragraph.txxt: Partially tagged (2 samples)
        - list.txxt: Not tagged yet
        - definition.txxt: Not tagged yet
        - verbatim.txxt: Not tagged yet
        - annotation.txxt: Not tagged yet
        - session.txxt: Not tagged yet
        - labels.txxt: Not tagged yet
        - parameters.txxt: Not tagged yet
        - formatting.txxt: Not tagged yet
        - references/*: Not reviewed yet

    5.2. Tagging Progress

        Priority 1 (Valid inputs - simple forms):
        - [ ] Paragraph: simple, multiline
        - [ ] List: plain-flat, numerical-flat, alphabetical-flat, roman-flat
        - [ ] Definition: simple-term, multiline-content
        - [ ] Verbatim: inflow-basic, inflow-no-title, stretched-basic
        - [ ] Annotation: inline-simple, empty-content
        - [ ] Session: unnumbered-basic, numbered-basic
        - [ ] Labels: simple-identifier, namespaced
        - [ ] Parameters: simple-key-value, multiple-params
        - [ ] Formatting: bold-simple, italic-simple, code-simple, math-simple
        - [ ] References: url-http, path-relative, session-numbered, footnote-numeric
        
        Priority 2 (Valid inputs - complex forms):
        - [ ] All elements in their more complex manifestations
        
        Priority 3 (Container combinations):
        - [ ] Content container flat combinations
        - [ ] Nested content
        - [ ] Session container combinations
        
        Priority 4 (Invalid inputs):
        - [ ] Per-element invalid cases

6. Testing Integration

    6.1. Usage Example

        In test files:
            use tests::corpora::TxxtCorpora;
            
            #[test]
            fn test_simple_paragraph() {
                let corpus = TxxtCorpora::load(
                    "txxt.core.spec.paragraph.valid.simple"
                ).unwrap();
                
                let result = parse(&corpus.source_text);
                assert!(result.is_ok());
            }

    6.2. Error Case Example

        For invalid inputs:
            #[test]
            fn test_invalid_definition() {
                let corpus = TxxtCorpora::load(
                    "txxt.core.spec.definition.invalid.empty-term"
                ).unwrap();
                
                assert!(corpus.is_error_case());
                assert_eq!(corpus.expected_error(), Some("ParseError"));
                
                let result = parse(&corpus.source_text);
                assert!(result.is_err());
            }

:: note :: This document defines the complete labeling scheme for spec-based test corpora. All spec samples should be tagged according to these conventions to ensure consistent, machine-extractable test cases.
