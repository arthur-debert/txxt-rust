//! # Annotation Parser Module
//!
//! This module contains the logic for parsing annotations - the metadata elements
//! that attach structured information to other txxt elements.
//!
//! ## Overview
//!
//! Annotations are metadata elements that attach structured information to other txxt
//! elements. They provide a flexible way to add semantic metadata, processing hints,
//! and structured data without disrupting the main document flow. Annotations can
//! be attached to any block element and support various annotation types including
//! labels, parameters, and custom metadata.
//!
//! ## Grammar
//!
//! From [`docs/specs/core/syntax.txxt`]:
//!
//! ```text
//! <annotation> = <annotation-marker> <annotation-content>
//! <annotation-marker> = "::" <whitespace> <annotation-label> <whitespace> "::"
//! <annotation-content> = <text-line>
//! ```
//!
//! Annotations use the `::` marker syntax and can contain any text content.
//! They are typically placed at the end of elements they annotate.
//!
//! ## AST Structure
//!
//! Post-parsing semantic representation:
//!
//! ```text
//! Annotation AST:
//!     ├── AnnotationBlock
//!     │   ├── label: String
//!     │   ├── content: Vec<Inline>
//!     │   ├── annotations: Vec<Annotation>
//!     │   └── tokens: TokenSequence
//! ```
//!
//! Key structural properties:
//! - Label extracted from annotation marker
//! - Content stored as inline elements (supports formatting)
//! - Self-referential structure (annotations can annotate annotations)
//! - Source tokens maintained for reconstruction
//!
//! ## AST Node Declaration
//!
//! ```rust
//! #[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
//! pub struct AnnotationBlock {
//!         Annotation label/type
//!     pub label: String,
//!         Annotation content with inline formatting
//!     pub content: Vec<Inline>,
//!         Annotations attached to this annotation
//!     pub annotations: Vec<Annotation>,
//!     /// Raw tokens for precise source reconstruction
//!     pub tokens: TokenSequence,
//! }
//! ```
//!
//! ## Corpora Examples
//!
//! From [`docs/dev/parser-core/per-element-corpora.txxt`] (simple cases only):
//!
//! ### Simple Cases (Basic Forms Only)
//! - `txxt.core.spec.annotation.valid.simple-label` - Basic annotation with label
//! - `txxt.core.spec.annotation.valid.multiline-content` - Annotation with multiline content
//! - `txxt.core.spec.annotation.valid.empty-content` - Annotation with empty content
//! - `txxt.core.spec.annotation.valid.nested-annotation` - Annotation containing another annotation
//!
//! ## Ensemble Examples
//!
//! From [`docs/specs/elements/annotation/examples/`]:
//!
//! - `01-simple-nosession-single-annotation.txxt` - Single annotation only
//! - `02-simple-nosession-multiple-annotation.txxt` - Multiple annotations only
//! - `03-simple-flat-single-annotation.txxt` - Single session with annotation
//! - `04-simple-flat-multiple-annotation.txxt` - Multiple sessions with annotations
//! - `05-simple-nested-multiple-annotation.txxt` - Nested sessions with annotations
//!
//! ## AST Assertion Example
//!
//! ```rust
//! use tests::assertions::{assert_annotation, AnnotationExpected};
//!
//! // Minimal validation (one property)
//! assert_annotation(&element, AnnotationExpected {
//!     label: Some("note"),
//!     ..Default::default()
//! });
//!
//! // Comprehensive validation (many properties)
//! assert_annotation(&element, AnnotationExpected {
//!     label: Some("warning"),
//!     content_contains: Some("important"),
//!     has_formatting: Some(false),
//!     ..Default::default()
//! });
//! ```
//!
//! ## Processing Rules
//!
//! Annotations follow the standard processing pattern with these specific requirements:
//!
//! ### Recognition Criteria
//! - Start with `::` marker
//! - Contain annotation label between markers
//! - End with `::` marker
//! - Can contain any text content after markers
//!
//! ### Annotation Parsing
//! 1. Extract label from between `::` markers
//! 2. Parse remaining content as inline elements
//! 3. Apply standard whitespace normalization
//! 4. Validate annotation structure and content
//!
//! ### Content Processing
//! 1. Parse annotation content through inline parser
//! 2. Support all inline formatting elements
//! 3. Preserve exact whitespace and formatting
//! 4. Handle nested annotations recursively
//!
//! ## Related Files
//!
//! - **Specification**: [`docs/specs/elements/annotation/annotation.txxt`]
//! - **AST Node**: [`src/ast/elements/annotation/annotation.rs`]
//! - **Tokenizer**: [`src/lexer/elements/annotation.rs`]
//! - **Test Assertions**: [`tests/assertions/elements/annotation/`]
//! - **Corpora**: [`docs/dev/parser-core/per-element-corpora.txxt`]
//! - **Ensemble Examples**: [`docs/specs/elements/annotation/examples/`]
//!
//! ## Testing:
//!
//!  1. Test manually the AST generated by the parser for the corpora examples.
//!  2. Use the AST assertions to test the parser for the corpora examples:
//!     2.1 One test per corpora sample.
//!     2.2 Keep in mind that the AST assertions were done pre parsing and are not
//!     being used yet, that is approach it as work in progress and be mindful that
//!     the AST assertions can have bugs or gaps, in which case verify through
//!     the ast testing and then fix / improve the AST assertions.
//!  3. Use the ensemble examples to test the parser for the corpora examples.
//!  3. Use the corpora stack to test exception / errors.
//!
//! ## Annotation specificity:
//!
//!  Annotations are self-contained metadata elements that can be attached to any
//!  block element. They support recursive annotation (annotations can annotate
//!  other annotations) and flexible content formatting while maintaining clear
//!  structural boundaries through the `::` marker syntax.
//!
