:: title :: txxt Deep Dive: Verbatim Block Details
:: author :: Arthur Debert (Original), Gemini (Refactor)
:: pub_date :: 2025-09-23

This document covers specific rules and design rationale for verbatim blocks.

Verbatim blocks contain non txxt-formated content, such as code in a programming language, diagrams=, images and other data. Verbatim blocks have a uniquer role, and that unique role requires special handling.

1. Special Cased From Lexing to Parsing 

    By definition verbatim blocks hold content that txxt should not parse. Not only that, it must not parse.  Parsing such content may trip the scanner or parser, for example by emitting bogus indent and dedent tokens. 

    Hence the very first thing when parsing a txxt string is to identify such content and mark it offlimits to the scanner and parser. 

2. Syntax

    Verbatim blocks are formed by a title, varbatim lines and the label.

    Conceptually (not concretly):
    		├── block start
    		    ├── title 
    		    ├── title-end-marker (:)
    		├── verbatim line (...)
    		    ├── raw text 
    		    ├── line break
    		├── block end
    		    ├── parens 
    		    ├── label
    		    ├── params (optional)
    		    ├── parns
    (tree)

    It's simpler that it sounds. The previous elmeent is itself a verbatim block, with the title bein "Concepturally, (con concretly)", the verbatim lines are the tree ones, followed by the "tree" label inside parenthesis, signally the block's end.

    More formally: 
        <title><collon>
            <verbatim line>+
        <parens><label> <parames>?<parens>
    (taggy)

    Less formaly: 

    Foo Bar:
        the stuff
        more stuff

        blank lines in stuff are a ok
    (silly-text)

    Here we have title(Foo Bar), the verbatim lines (indendeted lower case and silly) and the label (silly-text). 

    Verbatim blocks start by a titlle, followed by a collon and line break . Titles can have any charecers as long it's a single line.

    Labels follow identifiers [docs/specs/identifiers.txxt] rules and can contain params [docs/specs/params.txxt]. 

    Both title label, AND content are optional, this is valid. 

    :
    ()

    This is a verbatim block with a blank title, no content lines and blank label. (of course it's not very informative).

3. Verbatim Content    

    Verbatim content is any number of line(s) , zero included between the start and end block delimiters.
    
    3.1 Empty Content Blocks

        Remember that verbatim ecodes no txxt representable information. Some of those, like images are not only not txxt, but not text, really, being binary data. Rather than forcing a document to display a whole lot of giberish, you can omit those. 
            
        A Pink Sunset:
        (image)               

        Defines a block whose content, an image describedd as a pink suset, the text won't display.

    3.2 In-flow Content

        Remember that we cannot parse varbatim lines, as we don't know how to.
        But we still need to keep scanning to figure out where the block ends. Now we are in trouble because:
             (something)
        could be a line in the verbatim content, to be mistaken as the block's end line. 
        No matter what the verbatim end line looked like, it could be part of the content.
        Hence to make this unequivocal, verbatim lines are +1 indented:
            -> Verbatim lines start here <-
            | This is the content wall

            | Blank lines are ok
            | The content starts at the wall
 .     (text)

        The verbatim line is not "<bunch os spaces> -> Verbatim lines start here -<" , rather it's just "->Verbatim lines start here-<". that is , the spaces up to the +1 indented wall are not part of it, they are how txxt can tell where the content it. 

        That means that no other text can appear *before* that indentation wall, as that's not part of the content. This would be ilegal:
            This is the wall
            The next line cannot exist, it's an error: 
    !! Texto cannot start before the wall!
        bad-verbatim, no parens here else this doc won't parse)

        With that, we can safely scan for a line that has the same indentation level as the block's start and looks like (label), since the verbatim content CANNOT start there.

        These are in-flow blocks, and they exist alongside with streched blocks.
    
    3.3 Streched Content

        Sometimes verbatim blocks describe data that is wide, that is has many characters per line. 
        The quintessential example are tables, like markdown tables. 

        While txxt doesnt enforce line widths, most tooling, viewers, windows do have one and it's good form to stay withing the 80-100 columns range. As a result of txxt's indentation often a verbatim block content will start at column 20 or 30, giving an effective 50 columns of width, which is too small for some content. 

        When the content benefits from a larger width, the block can be in streched mode.
        Streched mode forces the verbatim line indentation wall to be *absolute* column 1, regardless of where the verbatim block is defined. For example: 
 | Block Type | Has  Wall | Indentations Wall Column            |  Blank Lines |  Content After wal| 
 |------------|-----------|-------------------------------------|--------------|-------------------|
 | In-flow    | Yes       | Block start + 1 tab stop (4 spaces) | Yes          | Yes
 | Stretched  | Yes       | col 1                               | Yes          | < end block line  |
        (markdown.table)

        The block above is on such block where the content it self takes 100 coluns, and starting at col 10 or 20  would butcher it.

        Note that these blocks still have a wall, a minimum col which they cannot ocupy. In the inflow, it's a dynamic number: block declaration + 1 identation, and streched is an absolute one, col 1.  It could not be col 0, else in such blocks a line that read (foo) would be interpreted as the blocks end line. With this design, even verbatim blocks tht start at col 0 can have their end line safely identified regardless of the verbatim lines contents.

        True to txxt's hard core no-additional-syntax, what determines a blocks type, is whre the first character of the first non-blank line appears. It has to be either:
            - Verbatim start declaration + 1 indent or larger
            - Column 1
        That is how stretched and in-flow types are determined. You either have your content to the right of the document's flow , or placed in absolute column that would be ilegal for any other content.

        Blank lines are fine in both.

        Inf-low lines can start at any column. Do remeber that their actual content is <where they start> - <indentation wall>. Streched lines must be at col 1.


4. The AST

    As mentioned in the containers [docs/specs/containers.txxt] specs, all indentation changes are related to containers and verbatim blocks are no exception: 
    
        ├── verbatim
            ├── title
            │ 	├── ignore-container
            │ 	    ├── ignore-line
            │ 	    ├── ignore-line
            │ 	    ├── blank-line
            ├── label
    
    The ignore container differes from others as it can only have ignore and black lines. Like the content one, it doesn not expect to be enclosed in blank lines.


5. Notes on Processing Verbatim Blocks

    It's unique role requires a unique handling, that no other element has.
    For starters, the scanner cannot read ignore lines, hence the very first thing that txxt does is to scan and mark such lines in the document. Later the scanner will skip these. The scanner must define the block lines from the start to end lines, and not only the content lines, as those might be none.

    5.1 Verbatim Scanner  Logic: 

        Modal scanning. When it finds a match for block start (title + : + \s?$) it enters maybe verbatim mode.

        The very first non blank like will allow to detect in-flow (char col is wall or larger), streched (char col is 1) .

        Once in verbatim mode it will scan line by line until it finds a line that matches (<label>?<params>?) with the indentation col matching the block start declaration.

        If it does not find it or finds a line whose first col is between 1 (streched) and indentation wall , it is not a verbatim block. 

        It cannot continue, because it has ignore other lines in the process, so it must backtrat to previous block start candiate +1 then continue. 

        The verb scanner should not tokenize the start and end lines, leavintg that to the regular tokenizer. Those lines are valid txxt, and can be handled line any other line, leverating functions and tolls (like identifiers and params parsing.)

        The tokenizer should however, subtract the indentation wall from each verbatim line's content (be it a streched one, in which case it rmeoves the first char) or in-flow. 

        Let's make this clearer: 

                Nested blocks are a tad mind breaking:

                    |<- this is the wall
                    Verbatim line start here
                    X where X should be column 0 and
                              Y
                    y=col10
                (txxt: recursive=yes)
        (txxt)

        If the scanner finishes the document amidst a maybe verbatim mode, it should not blow up or error, but exit and not include that.

        The scanner should not cause an error, as it's just trying to identify the blocks, not parse the document.
                
    5.2 The Parser

        The parsere stil must parse and extract title, label and params. And product the correct ast structure.

    


6. Examples

    To illustrate some examples follow. 

    Complete one:
        
        alert('boredom ahead');

    (javascript: modal=yes)

    Full set, title, label, params and content, in-flow.

    The unlabeled one:

        who am I? 

    ()

    The parametrized unlabeled one:

        who am I? what are these params? 

    (:mistery=yes)

    :
        this one needs no Introduction
    (titleless-block)

    Shallow Block:
    (no-content)