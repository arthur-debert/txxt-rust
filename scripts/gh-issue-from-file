#!/usr/bin/env bash

set -euo pipefail

show_help() {
    cat << EOF
Usage: $0 [OPTIONS] <file>

Creates a GitHub issue from a file. The first line becomes the title and the rest becomes the body.
If the first line starts with #, it will be stripped as a markdown header.

Arguments:
  <file>                 File to create issue from

Options:
  --prefix <prefix>      Add prefix to issue title (format: "prefix: title")
  -h, --help             Show this help

Examples:
  $0 issue.txt                    # Create issue from file
  $0 --prefix "bug" issue.txt     # Create issue with "bug: <title>" format
  $0 issue.md                     # Works with any file extension

The script automatically strips markdown headers (#) from the title and works
with any file format, not just txxt.
EOF
}

process_file() {
    local file="$1"
    local prefix="$2"
    
    # Check if file exists
    if [[ ! -f "${file}" ]]; then
        echo "File not found: ${file}" >&2
        exit 1
    fi
    
    # Read first line for title
    local line1
    IFS= read -r line1 < "${file}" || { echo "Cannot read title line" >&2; exit 1; }
    
    # Strip markdown header if present
    local title="${line1}"
    if [[ "${title}" =~ ^#[[:space:]]* ]]; then
        title="${title#\#}"
        title="${title#"${title%%[![:space:]]*}"}" # trim leading whitespace
    fi
    
    # Add prefix if provided
    if [[ -n "${prefix}" ]]; then
        title="${prefix}: ${title}"
    fi
    
    # Get body (everything after first line)
    local body
    body=$(tail -n +2 "${file}")
    
    echo "TITLE:${title}"
    echo "BODY:${body}"
}

check_issue_exists() {
    local title="$1"
    
    # Use simple gh issue list with grep to check for existing issues
    local existing_issue
    existing_issue=$(gh issue list --limit 100 --json number,title,url | jq -r --arg title "${title}" '.[] | select(.title == $title) | "#\(.number) \(.title) \(.url)"' | head -1)
    
    if [[ -n "${existing_issue}" ]]; then
        echo "ISSUE_EXISTS:${existing_issue}"
        return 0
    else
        return 1
    fi
}

create_gh_issue() {
    local title="$1"
    local body="$2"
    
    gh issue create --title "${title}" --body "${body}"
}

main() {
    local prefix=""
    local file=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --prefix)
                prefix="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                echo "Unknown option: $1" >&2
                show_help >&2
                exit 1
                ;;
            *)
                if [[ -z "$file" ]]; then
                    file="$1"
                else
                    echo "Error: Multiple files specified" >&2
                    show_help >&2
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Validate arguments
    if [[ -z "$file" ]]; then
        echo "Error: File argument is required" >&2
        show_help >&2
        exit 1
    fi
    
    # Get title and body from file
    local output
    output=$(process_file "${file}" "${prefix}")
    
    local title body
    title=$(echo "${output}" | grep "^TITLE:" | cut -d: -f2-)
    body=$(echo "${output}" | grep -A 999 "^BODY:" | tail -n +1 | cut -d: -f2-)
    
    # Check if issue exists
    if check_issue_exists "${title}"; then
        return 0
    fi
    
    # Create new issue
    create_gh_issue "${title}" "${body}"
}

main "$@"
