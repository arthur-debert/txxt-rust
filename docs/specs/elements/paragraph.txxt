:: title :: Paragraph Element Specification
:: author :: Arthur Debert
:: pub-date :: 2025-01-12

Complete specification for paragraphs - the fundamental text blocks that contain inline content and form the basic unit of readable text in txxt documents.

1. Purpose

    Paragraphs are the foundational building blocks for textual content in txxt. They contain inline text with formatting, create readable text flow, and serve as the default element type when no other block structure is detected. Paragraphs provide the semantic foundation for document content while supporting rich inline formatting including emphasis, code, references, and mathematical expressions.

2. Syntax

    2.1. Basic Paragraph Form

        Simple paragraph:
            This is a basic paragraph containing plain text. It flows naturally and can span multiple lines within the same paragraph block.
        :: txxt.core.spec.paragraph.valid.simple ::

        Multiple paragraphs with blank line separation:
            This is the first paragraph.
            
            This is the second paragraph, separated by a blank line.
        :: multiple

    2.2. Inline Formatting Support

        Rich paragraph with inline elements:
            This paragraph contains *bold text*, _italic text_, `inline code`, and #mathematical expressions#. It can also include [references] and other inline elements.
        :: formatted

    2.3. Multi-line Paragraphs

        Paragraph spanning multiple lines:
            This paragraph begins on one line
            and continues on the next line.
            All lines at the same indentation level
            belong to the same paragraph.
        :: txxt.core.spec.paragraph.valid.multiline ::

3. Grammar

    3.1. Paragraph Structure

        A paragraph consists of one or more consecutive text lines, optionally terminated by a blank line.

            <paragraph> = <text-line>+ <blank-line>?

        A text line contains span elements and ends with a line break.

            <text-line> = <span-element> (<whitespace> <span-element>)* <line-break>
        
        For a full definition of `<span-element>`, see [syntax.txxt].
        :: grammar

    3.2. Line Continuation Rules

        Paragraph line rules:
        - Lines at same indentation level continue the paragraph
        - Blank line terminates the paragraph
        - Indentation increase creates nested content (not part of paragraph)
        - Indentation decrease ends paragraph and returns to parent level

    3.3. Content Rules

        Paragraph content constraints:
        - Cannot contain block elements (lists, sessions, definitions)
        - Can contain any inline elements (emphasis, code, math, references)
        - Cannot be empty (must have at least some text content)
        - Whitespace-only lines are treated as blank lines

4. AST Structure

    Post-parsing semantic representation:

    Paragraph AST:
        ├── Paragraph
        │   ├── content: Vec<Inline>
        │   ├── annotations: Vec<Annotation>
        │   └── tokens: TokenSequence
    :: tree

    Key structural properties:
    - Content stored as sequence of inline elements
    - Text runs merged for efficiency
    - Formatting preserved through inline element types
    - Source tokens maintained for reconstruction

5. Processing Rules

    Paragraphs follow the standard processing pattern defined in [common-processing.txxt] with the following element-specific requirements:

    5.1. Recognition Criteria

        Default recognition pattern (lowest priority):
        - Line does not match any other block element pattern
        - Line contains text content (not whitespace-only)
        - Line not at increased indentation from current level
        - Serves as default element type when no other pattern matches

    5.2. Line Grouping

        Paragraph-specific content collection:
        1. Collect consecutive lines at same indentation level
        2. Stop at blank line or indentation change
        3. Stop at line matching another block element pattern
        4. Parse collected lines as single paragraph content

    5.3. Inline Processing

        Paragraph text processing:
        1. Concatenate all paragraph lines with spaces
        2. Apply standard whitespace normalization
        3. Parse through standard inline parser for formatting
        4. Merge adjacent text runs using standard efficiency rules

6. Edge Cases

    6.1. Empty Lines

        Whitespace-only lines are treated as blank lines:
            First paragraph here.
                
            Second paragraph after blank line.
        :: whitespace-handling

    6.2. Mixed Indentation

        Paragraphs must maintain consistent indentation:
        
        Valid (consistent indentation):
            This paragraph maintains
            the same indentation level
            throughout all lines.
        :: valid-indent

        Invalid (inconsistent indentation):
            This paragraph starts here
              but this line is over-indented
            and this returns to original level.
        :: invalid-indent

    6.3. Inline Element Boundaries

        Inline elements cannot span line breaks within paragraphs:
        
        Valid (complete inline elements):
            This contains *complete bold text* and
            _complete italic text_ across lines.
        :: valid-inline

        Invalid (broken inline elements):
            This contains *bold text that
            spans across lines without closing*.
        :: invalid-inline

7. Processing Details

    Paragraphs use standard processing with these specific whitespace and normalization rules:

    7.1. Whitespace Handling

        Paragraph-specific whitespace rules:
        - Leading/trailing whitespace on lines is trimmed
        - Multiple spaces between words collapse to single space
        - Line breaks within paragraph become spaces
        - Preserve formatting-significant whitespace in inline elements

    7.2. Text Normalization

        Paragraph content processing steps:
        1. Trim leading/trailing whitespace from each line
        2. Join lines with single spaces
        3. Normalize multiple consecutive spaces to single space
        4. Parse inline elements respecting their whitespace rules

8. Relationship to Other Elements

    8.1. Container Integration

        Paragraphs in containers:
        - Can appear in any container type that allows block content
        - Follow container indentation rules
        - Maintain their own inline content processing
        - Can be annotated like other block elements

    8.2. Inline Element Support

        Supported inline elements within paragraphs:
        - Emphasis (bold, italic, underline)
        - Code spans and mathematical expressions
        - References, citations, and links
        - Custom inline annotations
        - Line breaks and spacing control

    8.3. Session and List Context

        Paragraphs in structured content:
        - Session content → Direct paragraphs in session container
        - List items → Paragraphs as list item content
        - Definition content → Paragraphs in definition container
        - Annotation content → Paragraphs in annotation container

9. Implementation Notes

    Paragraphs follow the standard implementation pattern defined in [common-processing.txxt] with the following element-specific requirements:

    9.1. Default Element Integration

        Paragraph-specific parser requirements:
        - Serves as default block element when no other pattern matches
        - Line-by-line collection until termination condition
        - Must integrate with all other element recognition patterns

    9.2. Error Handling Additions

        Beyond standard error handling, paragraphs provide:

        Paragraph-specific error recovery:
        - Malformed inline elements → Include as literal text (standard graceful degradation)
        - Inconsistent indentation → Parse as separate paragraphs
        - Empty paragraphs → Skip and continue parsing
        - Invalid characters → Include as-is with warning

        Paragraphs serve as the ultimate fallback for all content preservation.


:: note :: Paragraphs are the foundational text elements in txxt, providing the primary mechanism for readable content delivery while supporting rich inline formatting and seamless integration with the document's hierarchical structure.