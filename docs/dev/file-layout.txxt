File Layout

The txxt format structure is represented in various places, from multiple places in the codebase (i.e. ast, tokenizer, etc) to the specs.
Currently there is no consistenty, but we're slowly migrating towares a standard layout at this document's end.

We aim to consistency not blind compliance. 
In some domains, for example tokening, we have things like markers, which are ok to deviate from this structure. 
That is to say we strive for a similar structure even through domains do vary in how they map precisely.
Remember that tests file paths and name should mirror as mubh as possible the coee being tested


<domain>/core                 # Non domain related bits, as ifrastructure
<domain>/elements
├── mod.rs                    # Main module file with re-exports
├── core.rs                   # Core element traits and types
│
├── annotation/               # Annotation elements
│   ├── mod.rs
│   └── annotation.rs
│
├── containers/               # Generic container elements
│   ├── mod.rs
│   └── content.rs            # Only content container (generic)
│
│
├── components/               # smaller components that are resued in various elements
│   ├── mod.rs
│   └── parameters.rs
│
│
├── definition/               # Definition elements
│   ├── mod.rs
│   └── definition.rs
│
├── document/                 # Document-level elements
│   ├── mod.rs
│   └── document.rs
│
├── formatting/               # Text formatting elements
│   ├── mod.rs
│   ├── emphasis.rs           # bold, italic
│   ├── strong.rs           # bold, italic
│   ├── code.rs
│   └── math.rs
│
├── list/                     # List-related elements
│   ├── mod.rs
│   ├── list.rs
│   └── list_item.rs
│
├── paragraph/                # Paragraph elements
│   ├── mod.rs
│   └── paragraph.rs
│
├── references/               # Reference and link elements
│   ├── mod.rs
│   ├── file.rs
│   ├── url.rs
│   ├── session_ref.rs
│   ├── footnote_ref.rs
│   ├── citation.rs
│   └── tocome.rs
│
├── session/                  # Session-related elements
│   ├── mod.rs
│   ├── session.rs
│   ├── session_container.rs  # Session-specific container
│   └── heading.rs
│
├── verbatim/                 # Verbatim elements
│   ├── mod.rs
│   ├── verbatim_line.rs
│   ├── verbatim_block.rs
│   └── ignore_container.rs   # Verbatim-specific container
│
└── components/               # Shared component elements
    ├── mod.rs
    ├── label.rs
    └── parameters.rs


## Test File Layout

Tests are organized to mirror the source code structure as closely as possible.
This ensures that tests are easy to find and maintain, with clear mapping between
code and its corresponding tests.

### Test Directory Structure

```
tests/
├── suite.rs                    # Main test suite integration - includes all test modules
├── testing_framework_check.rs  # Only remaining top-level test file
│
├── assembler/                  # Tests for assembler components
│   ├── mod.rs# mod.rs must export up to top level

│   └── pipeline/
│       └── mod.rs                # mod.rs must export up to top level
...

### Test Organization Principles

1. **Mirror Source Structure**: Test directories should mirror the `src/` structure as closely as possible
2. **Minimal Top-Level Files**: Only `suite.rs` and essential infrastructure files should be at the top level
3. **Direct Module Inclusion**: `tests/suite.rs` includes directories directly, no `include_*` indirection files
4. **Proper Module Structure**: Each test directory has a `mod.rs` file that exports its submodules
5. **Clear Naming**: Test files should clearly indicate what they're testing

### Adding New Tests

When adding new tests:

1. **Identify the Target**: Determine which source module your test is testing
2. **Find the Test Directory**: Look for the corresponding directory in `tests/`
3. **Add Your Test**: Place your test file in the appropriate subdirectory
4. **Update mod.rs**: Add your test module to the relevant `mod.rs` file
5. **Verify Discovery**: Run `cargo test --lib -- --list` to ensure your test is discovered

### Example: Adding a Parser Test

If you're testing a new parser element in `src/parser/elements/new_element/`:

1. Create `tests/parser/elements/new_element/new_element_tests.rs`
2. Add `mod new_element_tests;` to `tests/parser/elements/mod.rs`
3. Your test will be automatically discovered by `tests/suite.rs`

This structure ensures that tests are easy to find, maintain, and extend while keeping the test suite organized and discoverable.

