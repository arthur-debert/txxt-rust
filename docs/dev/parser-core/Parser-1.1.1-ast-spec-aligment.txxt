Specification for implementing a complete AST restructure that mirrors the specification taxonomy defined in [docs/specs/elements/].

1. Overview

    Redesign the AST element structure to precisely align with the element taxonomy in the specification documents. The existing AST had evolved organically and diverged from the spec terminology and hierarchy, making it harder to reason about and maintain.

2. Design Goals

    2.1. Spec Terminology Alignment

        - Use exact terminology from [docs/specs/core/terminology.txxt]
        - Element types: Span, Line, Block, Container
        - Container types: ContentContainer, SessionContainer, IgnoreContainer
        - Clear separation between container types based on what they can hold

    2.2. Type-Safe Container Architecture

        - ContentContainer: Holds any blocks except sessions
        - SessionContainer: Holds any blocks including sessions (document root, session content)
        - IgnoreContainer: Holds verbatim content only
        - Enforce restrictions at the type level via distinct element enums

    2.3. Uniform Text Processing

        - TextTransform system for consistent text handling across all contexts
        - Identity, Emphasis, Strong, Code, Math, Composed, Custom transforms
        - Enables uniform processing, extensibility, composability, performance optimization

3. Element Hierarchy

    3.1. Core Traits

        - TxxtElement: Base trait for all elements (element_type, tokens, annotations, parameters)
        - SpanElement: For inline content (text_content, is_formatted)
        - LineElement: For complete lines (spans, line_content)
        - BlockElement: For structural units (can_contain_blocks, content_summary)
        - ContainerElement: For hierarchical holders (container_type, can_contain_sessions)

    3.2. Span Elements

        - TextSpan: Plain text foundation
        - BoldSpan: Strong emphasis with nested transforms
        - ItalicSpan: Emphasis with nested transforms
        - CodeSpan: Monospace, no nested formatting
        - MathSpan: Mathematical expressions, no nested formatting
        - ReferenceSpan: Generic references
        - CitationSpan: Academic citations [@key]
        - PageReferenceSpan: Page references
        - SessionReferenceSpan: Section cross-references [#2.1]
        - FootnoteReferenceSpan: Footnote citations [1]

    3.3. Line Elements

        - TextLine: Complete line with span elements
        - BlankLine: Structural separator (affects annotation attachment)

    3.4. Block Elements

        - ParagraphBlock: Flowing text with TextTransform content
        - ListBlock: Structured collections with decoration types
        - DefinitionBlock: Term-definition pairs with DefinitionTerm + ContentContainer
        - VerbatimBlock: Non-parsed content with IgnoreContainer
        - SessionBlock: Hierarchical sections with SessionTitle + SessionContainer
        - AnnotationBlock: Metadata with inline or block content

    3.5. Container Elements

        Three distinct container types with type-safe content restrictions:
        
        - ContentContainer: ContentContainerElement enum
            - Can hold: Paragraph, List, Definition, Verbatim, Annotation, BlankLine
            - Cannot hold: Session (enforced by separate enum)
            
        - SessionContainer: SessionContainerElement enum  
            - Can hold: Paragraph, List, Definition, Verbatim, Annotation, Session, BlankLine
            - Used for: Document root, session content
            
        - IgnoreContainer: Raw verbatim lines
            - Holds: IgnoreLine, BlankLine only
            - Preserves exact formatting

4. Migration Requirements

    4.1. Breaking Changes

        - All existing AST structures replaced with new element hierarchy
        - Old blocks.rs consolidated into modular elements/ directory structure
        - Container type changed from generic Container to specific types

    4.2. Business Logic Preservation

        - Migrate all existing validation logic to new element types
        - Preserve all text extraction and processing functionality
        - Maintain all annotation attachment rules
        - Keep all parameter handling behavior

    4.3. Test Compatibility

        - All 649+ existing tests must continue passing
        - No behavioral changes to parsing or validation
        - Only structural reorganization of AST representation

5. Implementation Structure

    5.1. File Organization

        src/ast/elements/
            core.rs              :: Element types and traits
            mod.rs               :: Re-exports
            annotation.rs        :: AnnotationBlock
            definition.rs        :: DefinitionBlock, DefinitionTerm
            list.rs              :: ListBlock, ListItem
            paragraph.rs         :: ParagraphBlock
            session.rs           :: SessionBlock, SessionTitle
            verbatim.rs          :: VerbatimBlock, VerbatimType
            labels.rs            :: Label types
            parameters.rs        :: Parameter helpers
            containers/
                mod.rs           :: Container re-exports
                content.rs       :: ContentContainer, ContentContainerElement
                session.rs       :: SessionContainer, SessionContainerElement
                ignore.rs        :: IgnoreContainer, IgnoreLine
            inlines/
                mod.rs           :: Inline element types
                formatting.rs    :: BoldSpan, ItalicSpan, CodeSpan, MathSpan
                references/
                    mod.rs       :: Reference span types
                    citations.rs :: CitationSpan
                    footnote_ref.rs :: FootnoteReferenceSpan
                    page_ref.rs :: PageReferenceSpan
                    session_ref.rs :: SessionReferenceSpan

    5.2. Key Abstractions

        - ElementNode enum: Unified discriminated union for all element types
        - TextTransform: Uniform text processing layer across all contexts
        - ElementAdapter: TxxtElement wrapper for traversal system compatibility

6. Validation Criteria

    - All existing tests pass (649+ tests)
    - AST debug visualization updated to work with new structure
    - Document parser produces new AST structure
    - Clear separation between container types enforced
    - All spec terminology correctly reflected in type names

7. Benefits Delivered

    7.1. Maintainability

        - Clear correspondence between spec docs and implementation
        - Type system enforces architectural constraints
        - Easier onboarding for new contributors

    7.2. Correctness

        - Type-safe container restrictions prevent invalid structures
        - Uniform text processing reduces edge cases
        - Clearer validation rules per element type

    7.3. Extensibility

        - TextTransform.Custom enables new formatting types
        - Modular element structure simplifies adding new block types
        - Container architecture accommodates new content types

:: note :: This specification was implemented in commit 9d68852 as a breaking change that maintained all test compatibility while completely restructuring the AST.
