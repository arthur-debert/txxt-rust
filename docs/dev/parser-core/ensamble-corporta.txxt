Parser 1.4.2 Ensemble Corpora - Full Document Test Cases

Complete specification of ensemble documents that test integrated element combinations and full document parsing.

1. Overview

    While isolated element tests (Parser-1.4.1) validate individual components, ensemble documents test how elements combine and interact in realistic scenarios. These full documents progress from simple to complex, building up the parser's capabilities systematically.
    
    Unlike isolated element tests which use verbatim block labels for extraction, ensemble tests use entire files as test cases. The corpora system will load these via `TxxtCorpora::load_document()`.

2. Ensemble Document Structure

    2.1. Naming Convention
    
        All ensemble documents follow this naming pattern:
            NN-descriptive-name.txxt
        
        Where:
        - NN: Two-digit sequence number (01, 02, etc.)
        - descriptive-name: Kebab-case description of what is tested
        - All files in docs/specs/ensembles/
        
    2.2. Progressive Complexity
    
        Documents are ordered by complexity:
        - Start with simplest valid documents
        - Gradually introduce new element types
        - Build up nesting and structure
        - Culminate in comprehensive examples
        
    2.3. Parser Integration
    
        Each document serves as a complete test case:
        - Parse the entire document
        - Validate AST structure
        - Check element relationships
        - Verify container boundaries
        - Test session hierarchy

3. Ensemble Document Catalog

    3.1. Foundation Documents (01-03)
    
        01-two-paragraphs.txxt:
            Purpose: Simplest valid txxt document
            Tests: Basic paragraph recognition, blank line separation
            Elements: 2 paragraphs
            Complexity: Minimal
            
        02-session-one-paragraph.txxt:
            Purpose: Introduce session structure
            Tests: Session recognition, content indentation, session container
            Elements: 1 session, 1 paragraph
            Complexity: Low
            
        03-session-multiple-paragraphs.txxt:
            Purpose: Session with multiple content blocks
            Tests: Multiple paragraphs in session container, blank line handling
            Elements: 1 numbered session, 3 paragraphs
            Complexity: Low
            
    3.2. Flat Structure Documents (04)
    
        04-multiple-sessions-flat.txxt:
            Purpose: Multiple peer sessions
            Tests: Session sequence, flat hierarchy, multiple session containers
            Elements: 3 numbered sessions, 3 paragraphs
            Complexity: Low-Medium
            
    3.3. Nested Structure Documents (05)
    
        05-nested-sessions-basic.txxt:
            Purpose: Session nesting fundamentals
            Tests: Hierarchical sessions, session within session container, numbering hierarchy
            Elements: 2 parent sessions, 2 nested sessions, 5 paragraphs
            Complexity: Medium
            
    3.4. Mixed Content Documents (06-08)
    
        06-session-with-list.txxt:
            Purpose: Lists integrated with sessions
            Tests: List in session content container, list recognition in context
            Elements: 1 session, 2 paragraphs, 1 list (4 items)
            Complexity: Medium
            
        07-session-with-definition.txxt:
            Purpose: Definitions integrated with sessions
            Tests: Multiple definitions in session, definition content containers
            Elements: 1 session, 1 paragraph, 3 definitions
            Complexity: Medium
            
        08-mixed-content-flat.txxt:
            Purpose: Multiple element types at same level
            Tests: Paragraphs, lists, and definitions as peers, content container variety
            Elements: 1 session, 4 paragraphs, 1 list (4 items), 1 definition
            Complexity: Medium
            
    3.5. Complex Nesting Documents (09)
    
        09-nested-complex.txxt:
            Purpose: Deep nesting with multiple element types
            Tests: Triple-nested sessions, nested lists, definitions at various levels, arbitrary depth
            Elements: 2 parent sessions, 2 nested sessions, 1 triple-nested session, multiple paragraphs, nested lists, 1 definition
            Complexity: High
            
    3.6. Feature-Rich Documents (10-11)
    
        10-document-with-annotations.txxt:
            Purpose: Document-level and element-level annotations
            Tests: Annotation attachment rules, document metadata, annotation in context
            Elements: 4 document annotations, 2 sessions, 2 element annotations, 1 list
            Complexity: Medium-High
            
        11-full-document.txxt:
            Purpose: Comprehensive demonstration of all features
            Tests: Complete parser capabilities, all element types, deep nesting, inline formatting
            Elements: 6 document annotations, 6 main sessions with subsections, paragraphs with inline formatting, lists (flat and nested), 3 definitions, 1 verbatim block, mathematical expressions
            Complexity: Very High

4. Testing Strategy

    4.1. Progressive Validation
    
        Documents should be tested in sequence:
        1. Start with 01-two-paragraphs.txxt
        2. Progress through each document
        3. Each success enables the next level
        4. Failure indicates missing capability
        
        This progressive approach helps identify exactly where parser implementation needs work.
        
    4.2. Test Coverage Matrix
    
        Element Type Coverage:
        - Paragraphs: All documents (01-11)
        - Sessions: 02-11
        - Lists: 06, 08, 09, 11
        - Definitions: 07, 08, 09, 11
        - Verbatim: 11
        - Annotations: 10, 11
        
        Structure Coverage:
        - Flat structure: 01, 04, 06, 07
        - Basic nesting: 02, 03, 05
        - Deep nesting: 09, 11
        - Mixed content: 08, 09, 11
        
        Container Coverage:
        - Content container: 06, 07, 08, 09, 11
        - Session container: 02-11
        - Nested containers: 05, 09, 11
        
    4.3. AST Validation Points
    
        For each document, validate:
        - Correct element count by type
        - Proper parent-child relationships
        - Accurate container types
        - Session hierarchy depth
        - Annotation attachment correctness
        - Token sequence preservation

5. Implementation Notes

    5.1. Corpora System Enhancement
    
        The corpora system needs enhancement for full documents:
        
        Current: Extract from verbatim labels
            TxxtCorpora::load("txxt.core.spec.element.validity.case")
            
        New: Load entire document files
            TxxtCorpora::load_document("01-two-paragraphs")
            TxxtCorpora::load_document("11-full-document")
            
        Implementation approach:
        - Add load_document() method to TxxtCorpora
        - Search docs/specs/ensembles/ directory
        - Match filename pattern: NN-name.txxt
        - Return entire file contents as Corpus
        - Set ProcessingStage appropriately
        
    5.2. Test Integration Example
    
        Usage in parser tests:
            use tests::corpora::TxxtCorpora;
            
            #[test]
            fn test_simple_document() {
                let corpus = TxxtCorpora::load_document(
                    "01-two-paragraphs"
                ).unwrap();
                
                let document = parse(&corpus.source_text)?;
                
                // Validate structure
                assert_eq!(document.blocks.len(), 2);
                assert!(matches!(document.blocks[0], Block::Paragraph(_)));
                assert!(matches!(document.blocks[1], Block::Paragraph(_)));
            }
            
            #[test]
            fn test_nested_document() {
                let corpus = TxxtCorpora::load_document(
                    "05-nested-sessions-basic"
                ).unwrap();
                
                let document = parse(&corpus.source_text)?;
                
                // Validate session nesting
                assert_eq!(document.blocks.len(), 2); // 2 top-level sessions
                // ... further validation
            }
            
    5.3. Snapshot Testing
    
        Ensemble documents are ideal for snapshot testing:
        - Parse document to AST
        - Serialize AST to stable format
        - Compare with saved snapshot
        - Use insta crate for snapshot management
        
        Example:
            #[test]
            fn test_full_document_snapshot() {
                let corpus = TxxtCorpora::load_document("11-full-document").unwrap();
                let document = parse(&corpus.source_text)?;
                
                insta::assert_yaml_snapshot!(document);
            }

6. Validation Checklist

    For each ensemble document, verify:
    
    6.1. Correctness
    
        - [ ] Valid txxt syntax throughout
        - [ ] Proper indentation (4 spaces per level)
        - [ ] Correct blank line usage
        - [ ] Session numbering consistency
        - [ ] No ambiguous constructs
        
    6.2. Completeness
    
        - [ ] Tests stated purpose
        - [ ] Exercises target elements
        - [ ] Includes edge cases if applicable
        - [ ] Demonstrates realistic usage
        - [ ] Progressive from previous documents
        
    6.3. Documentation
    
        - [ ] Listed in this catalog
        - [ ] Purpose clearly stated
        - [ ] Elements enumerated
        - [ ] Complexity level assigned
        - [ ] Testing focus identified

7. Future Ensemble Documents

    Additional ensembles to consider:
    
    7.1. Error Cases
    
        - Invalid-01-inconsistent-indent.txxt
        - Invalid-02-missing-session-content.txxt
        - Invalid-03-unclosed-verbatim.txxt
        - Invalid-04-malformed-definition.txxt
        
    7.2. Edge Cases
    
        - Edge-01-single-item-list-ambiguity.txxt
        - Edge-02-session-vs-paragraph.txxt
        - Edge-03-empty-verbatim-blocks.txxt
        - Edge-04-annotation-attachment.txxt
        
    7.3. Domain-Specific
    
        - Academic-paper.txxt (citations, bibliography)
        - Technical-spec.txxt (code examples, definitions)
        - Meeting-notes.txxt (lists, action items)
        - Tutorial.txxt (steps, examples, exercises)

8. Summary

    The 11 ensemble documents provide comprehensive coverage of txxt parsing scenarios:
    
    - Foundation: Basic structure (01-03)
    - Organization: Flat and nested sessions (04-05)
    - Integration: Mixed content types (06-08)
    - Complexity: Deep nesting (09)
    - Features: Annotations and comprehensive (10-11)
    
    Together, these documents ensure the parser can handle real-world txxt documents, from simple notes to complex technical specifications.

:: note :: Ensemble documents test integrated parsing capabilities. While isolated element tests validate components, these full documents validate the complete system working together.

