:: title :: Term Definitions

This is the spec for the definition element in txxt.

1. The Need

    A common requirement in scientific and technical writing is the ability to define terms. While this can be approximated with verbatim blocks, it is not ideal, as the definition's content should be parsable as standard `txxt`, allowing for inline formatting, links, and other features.

2. Syntax

   A term followed by a txxt-marker (`::`), with the definition itself following in an indented block.

    Example:
        txxt ::
            A plain text format designed for a high level of expressiveness, relying on indentation and minimal syntax.

        Parser::
            A program that processes an input text, checks its syntax, and produces a structured representation, such as an Abstract Syntax Tree (AST).
        
        Note: The space before `::` is optional. Both `Term ::` and `Term::` are valid syntax. But empty terms are not.

3. Design Rationale and Parser Impact

    The primary design challenge is to introduce a syntax that is intuitive and consistent with `txxt`'s ethos, without creating ambiguity for the existing multi-pass parser.

    3.1. The `Term:` Ambiguity

        The most intuitive syntax, `Term:`, is unfortunately ambiguous. The first parsing pass (`verbatim_extract.py`) is designed to be simple and greedy, identifying any line ending in a single colon as the potential start of a verbatim block. This syntax would cause the parser to incorrectly identify a definition as an unclosed verbatim block, leading to a fatal error.

    3.2. The `Term ::` Solution

        The proposed `Term ::` syntax (with optional space before `::`) is unambiguous and safe for the following reasons:

        - No Conflict with Pass 1 (Verbatim Extraction): The verbatim parser specifically looks for lines ending in a single, non-escaped colon. A line ending in `::` will not match this rule and will be correctly ignored by this pass.

        - No Conflict with Pass 2 (Annotation Extraction): The annotation parser (`annotation_extract.py`) uses a regular expression that matches the `::` marker at the *beginning* of a line (following any indentation). The proposed syntax places the `::` at the end of the term, so it will not be incorrectly identified as a annotation.

4.  The AST

    Since indentation increse alwasys signifies parent > child relationships, through containers, definitions are no different. This is the def AST: 
        ├── definition
            ├── term
            ├── content-container
                ├── element (paragraph, list etc)
    (tree)

    Note that , a valid term does require an actual child.
            

