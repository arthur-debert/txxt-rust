#!/usr/bin/env bash

set -euo pipefail

show_help() {
    cat << EOF
Usage: $0 <child_issue_id> [<child_issue_id> ...] --parent-id <parent_issue_id>

Creates sub-issue relationships by adding child issues to a parent issue.

Arguments:
  <child_issue_id>...     One or more child issue IDs to add as sub-issues

Options:
  --parent-id <id>       Parent issue ID (required)
  -h, --help             Show this help

Examples:
  $0 34 35 --parent-id 38   # Make issues 34 and 35 sub-issues of issue 38
  $0 34 --parent-id 38      # Make issue 34 a sub-issue of issue 38

The script uses GitHub's GraphQL API to create the sub-issue relationships.
All issue IDs should be numeric (without # prefix).
EOF
}

get_issue_node_id() {
    local issue_number="$1"
    gh api graphql -f query="
        query {
            repository(owner: \"$(gh repo view --json owner -q '.owner.login')\", name: \"$(gh repo view --json name -q '.name')\") {
                issue(number: ${issue_number}) {
                    id
                }
            }
        }
    " -q '.data.repository.issue.id'
}

add_sub_issue() {
    local parent_node_id="$1"
    local child_node_id="$2"
    local child_issue_number="$3"
    
    local result
    result=$(gh api graphql -f query="
        mutation {
            addSubIssue(input: {
                issueId: \"${parent_node_id}\"
                subIssueId: \"${child_node_id}\"
            }) {
                issue {
                    number
                }
                subIssue {
                    number
                }
            }
        }
    " 2>&1)
    
    local exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        echo "✓ Added issue #${child_issue_number} as sub-issue"
        return 0
    elif echo "$result" | grep -q "duplicate sub-issues"; then
        echo "- Issue #${child_issue_number} is already a sub-issue"
        return 0
    else
        echo "✗ Failed to add issue #${child_issue_number} as sub-issue" >&2
        return 1
    fi
}

main() {
    local parent_id=""
    local child_ids=()
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --parent-id)
                parent_id="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                echo "Unknown option: $1" >&2
                show_help >&2
                exit 1
                ;;
            *)
                child_ids+=("$1")
                shift
                ;;
        esac
    done
    
    # Validate arguments
    if [[ -z "$parent_id" ]]; then
        echo "Error: --parent-id is required" >&2
        show_help >&2
        exit 1
    fi
    
    if [[ ${#child_ids[@]} -eq 0 ]]; then
        echo "Error: At least one child issue ID is required" >&2
        show_help >&2
        exit 1
    fi
    
    # Validate numeric IDs
    if ! [[ "$parent_id" =~ ^[0-9]+$ ]]; then
        echo "Error: Parent ID must be numeric: $parent_id" >&2
        exit 1
    fi
    
    for child_id in "${child_ids[@]}"; do
        if ! [[ "$child_id" =~ ^[0-9]+$ ]]; then
            echo "Error: Child ID must be numeric: $child_id" >&2
            exit 1
        fi
    done
    
    # Get parent issue node ID
    echo "Getting parent issue #${parent_id} node ID..."
    local parent_node_id
    parent_node_id=$(get_issue_node_id "$parent_id")
    
    if [[ -z "$parent_node_id" ]]; then
        echo "Error: Could not find parent issue #${parent_id}" >&2
        exit 1
    fi
    
    # Process each child issue
    for child_id in "${child_ids[@]}"; do
        echo "Getting child issue #${child_id} node ID..."
        local child_node_id
        child_node_id=$(get_issue_node_id "$child_id")
        
        if [[ -z "$child_node_id" ]]; then
            echo "Error: Could not find child issue #${child_id}" >&2
            continue
        fi
        
        echo "Adding issue #${child_id} as sub-issue of #${parent_id}..."
        add_sub_issue "$parent_node_id" "$child_node_id" "$child_id"
    done
    
    echo "Sub-issue creation complete."
}

main "$@"