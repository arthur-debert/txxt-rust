:: title :: txxt Specification: Inline Formatting
:: author :: Arthur Debert (Original), Gemini (Refactor)
:: pub_date :: 2025-09-23

1. Inline Formats

    And finally, inline formats. These are quite different from the previous
    ones, as they don't dictate nor are influenced by the document structure
    and it's indentation.

    Inlines tag a piece of text, can be a word, a few words, even one character, as bold, inline, code or math  .
    This can be used in publishing workflows to idirect the look of these marked characters, which is useful.

    Everywhere where a text line is presente (paragraphs, session titles, list
    items) inline formats can be used, to change the appearance of a given span
    of the text.

    There are several of them, but they work in the same way, they use a pair
    of markers to delimit the span of text to be formatted. The pair must not
    be space separated from the text to be formatted. The start marker must
    precede the first character of the text to be formatted, and the end marker
    must follow the last character of the text to be formatted, no spaces in
    between markers and text.

    Different markers represent different formats: 

    - Asterisks (*) for *bold* text
    - Underscores (_) for _italic_ text
    - Backticks (`) for `mono spaced` text
    - Pound Signs (# ) a world with nicer presented math is a world worth living in.
    - Brackets ([...]) for [references and links].
    - Brackets with @ ([@...]) for [@smith2023] academic citations.

    Inline formats can be nested, but cannot span multiple lines. In case a
    pair is not properly closed it will be treated  as normal text.

    From an implementation perspective, all text is raw text rendered . Bold is raw text that goes through the bold rendered, while plain text is raw text that goes through the plain text renderer. The latter is an identity randerer, it doesn't do anything but this allows all text handling to be processed the same and the resulting AST to be regular.

2. References and Links

    References use a single-bracket syntax `[target]` to create links to other documents, sections, or external resources. The text inside the brackets specifies the link's destination.

    This is a powerful feature for creating connections both within and outside of a document.

    2.1. Examples

        - *External URL:* For more information, see [https://example.com].
        - *Simple URL:* You can also link to [example.com].
        - *Relative File Path:* See the architecture guide [../spec/02-structure.txxt].
        - *Absolute File Path:* Details are in [/docs/deep-dive/references.txxt].
        - *Section Anchor:* Jump to a specific section with [#2.1].

    2.2. Advanced Usage

        The reference system also supports more advanced features like footnote-style numerical references and named anchors defined in verbatim blocks.

        For a complete guide on these topics, as well as details on how link text (anchors) is determined, please see the deep-dive on this topic [../deep-dive/references.txxt].

    3. Academic Citations

    Academic citations use a bracket-at syntax `[@key]` to reference works in a bibliography. This provides a standard way to cite academic sources that integrates with existing reference management tools.

    3.1. Basic Citation Syntax

        - *Single citation:* As demonstrated in recent research [@smith2023].
        - *Multiple citations:* Several studies [@doe2024; @jones2025] support this.
        - *Citation with locator:* See the discussion [@smith2023, p. 45] for details.
        - *Complex locators:* The figure [@jones2025, ch. 3, fig. 2] illustrates this.

    3.2. Citation Keys

        Citation keys (like `smith2023`) correspond to entries in a bibliography file (typically BibTeX format) that is declared using a document-level annotation:

        :: bibliography :: references.bib

        The bibliography annotation tells publishing tools where to find the citation data. The `txxt` format itself does not manage or format citations - it simply provides the syntax to mark them.

    3.3. Processing Citations

        When a document is published:
        1. The publishing tool reads the bibliography file
        2. Finds all `[@key]` citations in the document
        3. Formats them according to the chosen citation style (APA, MLA, etc.)
        4. Generates a bibliography section with full references

        This separation keeps the source document clean and style-agnostic while integrating with existing academic workflows.
