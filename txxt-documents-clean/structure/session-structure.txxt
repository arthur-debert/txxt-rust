The most complex part of txxt to parse is the structure being derived from the indentation.
The indentation itself is not the problem, but the lack of explicit syntax for most elements is, which generates various ambiguities.

This document aggregates most of these issues, both for reference and tests. Do not add cases to it.

1. Sources

    There are three elements that cannot be identified by themselves, that is, by only looking at the line they are in. These are: 

    - Session titles (hence sessions)
    - List items
    - Paragraphs

    All these can have similar forms. While list items do require a list marker (- or 1.), session titles and paragraphs do not and can contain them. Hence, for some variants you can write list items off these three as consistently intertwined. 

2. General idea

    The general idea is that sessions create a new , deeper level, thus +1 indented. 
    Like here, the "2. General Idea" line itself could be any one of the three. How do you tell them apart? 
    The key is that session and lists require other features in the text, if you can't find them, by exclusion the element will be the paragraph.

    1. Sessions

        A session's title has to be preceded by a blank line, it's content is +1 Indented and Sessions cannot be empty. Hence: 
            Foo 

            Bar
        (txxt)

        Foo and Bar can only be paragraphs.

        Any valid session child would be +1 indented. 
        Here is the edge Case: 
            
            1. Session

                a. Sub-Section

                    c. Foo
        (txxt)

        What is each element in this example?  The way to decide is this: 
        - 1. Session follows all the rules for a session title, including an indented child. So it's a Session.
        - a. Sub Section also does so.
        - c. Foo does not. It has a blank line above, is +1 indented from the parent but has no children. Hence c. Foo is a paragraph. Note that this does not alter the classification for a. Sub-Section. It does not matter if its child is a paragraph or session, it is still a session.

2. Lists

    Note that in the example above we don't consider c. Foo to be a possible list. That is because lists cannot contain only one element (nesting included, that is, child-lists's items do count as one). So: 

    - Foo
    - Bar

    Is a list, so it

    - Foo
        1. Bar

    Because, including nested lists, we have 2 items here.

    Now,: 

    - Foo

    Is not a list, is a paragraph, as lists cannot be single items.
    This fact, together with sessions requiring a preceding blank line, pretty much disambiguates all cases, but one.

3.  Paragraphs: Dialogs

    While txxt is geared towards technical writing, it should be able to correctly represent dialogs, which, as one expects, uses the same initial characters as some lists, the dash. Hence:

    - Not sure about this.
    - Call John.

    Could be a perfectly fine list, but in this example it's a dialog. 
    The way to tell txxt that such line is a paragraph is by adding a period to the end-punctuation

    - Not sure about this..
    - Call John.

    Here since the first line ends with "." and the preceding character is a valid end punctuation mark (?, ., !, .. and others) it's a dialog. Note that only the first line needs to have the extra period.


4. .Indentation and Containers

    As we've seen indentation always denotes the structure, the parent-child relationship, but it's not technically how this is implemented.

    As we've seen in both these: 

    1. This is a title

        A paragraph, followed by a list

        1. Pack for Trip
            1. Passport

    The title, and the outer list (pack for trip) are not indented +1, although they denote the relationship. The reason for this is containers. 

    Containers is how any element that can have children work. Their form is: 

        <element>
            </element title / item>
            <container>
                <container children> -> indented
            </container>
        </element>

    (txxt)

    In this case lists look like this: 

    <list-item>
        <text line>
        <container>
        </container>
    </list-item

    If a list has no children the text line is aligned with the parent. When a nested list exists, then it will be like this: 

    <list>
        <outter-list-item>
            <text-line>
            <container>
                <list>
                    <inner-list-item>
                        <text line>
                        </container>
                    </inner-list-item>
                </list>
            </container>
        </outter-list-item>
    </list>

    There are two types of containers: ContentContainers and Session Containers.

    4.1 Content Containers

        The following elements have them, that is, they can have multiple children; 
        - Annotations
        - Definitions
        - Lists

        These elements cannot host children: 
        - Paragraph (pretty obvious why)
        - Verbatim Block: since this marks text that txxt does not format, no way to have children.

        Content containers can attach any element type but one Session. 
        It makes sense, right? You don't want an inner list item creating a new session, from a navigation point of view it would not make any sense, hence:

    4.2 Session Containers:

        These are and behave just like the Content ones, with the exception that they can hold another sessions. Hence the document's root is a session container of its own. 

        ps: currently the implementation still has session as having a title attribute then children node not the container here described. This is temporary so we're documenting the correct information.