:: title :: txxt Specification: Structure
:: author :: Arthur Debert (Original), Gemini (Refactor)
:: pub-date :: 2025-09-23

This document covers the structural elements of the txxt format, including sessions, paragraphs, lists, and verbatim blocks.

txxt diferentiates block elements (ocuupy a single line), from span elements.
High level elements are block elements, often comprised of span elements.

1. Paragraphs

    This is the first content of our session, in this case a one line paragraph. But with multiple sentences (multiple end-puncutation ).
    
    Paragraphs can be single lines.

    And can be multiline. 
    
    
2. Lists

    Paragraphs are cool, but lists are everywhere. txxt supports a few list types.

    - Regular lists, are unordered
    - Each item begins with a dash, space and the list item line text
    - Unordered is not the right name, as this list is ordered, we cannot swap list item positions.
    - It's just that the visual marker is unordered.

    So what we mean by ordered lists is one where the dash is displayed by an item index, as the 
    next block shows.

    1. This is ordered, as it starts with <digit>.\s (line text)
    2. Should follow 1 now
    3. Can have as many numbers as you like.
    
    Also, list items are made of the li (ordered or not) +_ a paragraph +_ :
    - Item
    1. Item
    1) Item
    i. Item
    a. Item
    a) Item 
    [a] Item

    These are all legal, but the canonical form (which is what linters / formatters and exporters use is) "1. Number, period, space, text line." The point is that txxt will take not: this list should be ordered with X style, but it's forgiving if the same list mixes styles (the style of the first item wins) or even the number ordering themselves . For example, a common and useful patter is to number all items as 1. This make editing lists much easier, since now, you don't have to re-number every follwoing item after aditions or removals, for example . Publishing tooling can auto-number these correctly for you.
    
    2.1 Nesting

        Lists are never enough,  and that's why you can have a list within a list, nested lists!

        - Groceries
            - Milk
            - Eggs
        - Farmer market:
            - Apples
            - Grapes
            - Cilantro

        As we covered early, lists are ordered, it's just that some are visually numbered. When nested they can intermingle as much as they'd like: 

        - Groceries
            1. Milk
            2. Eggs 
        - Farmer's Market: 
            - Apples (this one has no numbering)
            - Grapes
            - Cilantro

        And of course: 

        1. Groceries
            1. Milk 
            2. Eggs
        2. Farmer's Market
            2.1. Apples (this is fully qualified numbering, that is it shows the number of its parent(s))
            2.2. Both fully qualified and local numbering are fine.

        The parser will verify the format, but not the correctness of the numbering. All of these are valid.

        1. Groceries
            1. Milk
            1. Eggs
        1. Farmer's Market
            1.1. Apples 
            1.1. Oranges

        In fact the style above, where all items are 1, is called templated numbering, and it very useful. Authors use this feature while editing, as new mid-list insertions do not require for following items to be re-ordered every time. Tools can, on export workflows auto number items.


    1. Groceries
        1. Milk
        2. Eggs
    2. Farmer's Market
        
        :: paragraphs :: in this case we have document:
        Although much more expensive, for produce, there is no comparison.
        Be sure to check out Tony's stand, the shallots are perfect!

        2.1. Shallots 
        2.2. Garlic

    Note that , on the top list level, lists cannot be single item. as in: 

    :: invalid :: This will be treated as a paragraph:
    - Call mom.

    Which, lets face it, is reasonable, after all, one member lists are phrases :). Nested lists, however can have single lementts: 

    - Call mom
        - Be sure to wait until dad arrives, post 5pm

    Since there is no ambiguity now.

    For more detailed terminology and rules, such as the canonical form and templated numbering, please see the specs on this topic [../specs/lists.txxt].

3. Verbatim Blocks

    These are blocks whose content is not formatted per txxt, but according to some other format.
    As hard as it may sound, all formats must accpept they are not the only ones, and everyone is 
    seeing other formats all the time.  Then we must structure how to do this honorably.  For starters leave the other format text alone, resist temptation, don't meddle. And if possible,go the extra mile by giving hints on 
    how that other one would like to be treated, by labeling them.

    The typical example is a fragments written in a programming language. Their purpose is two fold: 

    1. Skip formatting their content as txxt
    2. Optional: A label, a hint for tools to decide on how to format the block's content.

    Verbatim blocks can have blank lines that are to be preserved.
    Verbatim has two forms: in-flow and stretched.

    :: clever :: this itself is a verbatim block encoded in txxt , with the title "The general form is" and the label "txxt"
    The general form is:
        <title>?:
            <block lines>...
        (<label>?)
    (txxt)

3.1 In-flow
    The in flow one, occurs when the label is indented on the session content base line, and it's content is +1 indented

    In-flow exmaple:
        <label>?:
            +1in <text line> ... (at least one line)
            .. after the first text line you can have blank lines>
        (some-format)
    (txxt)

    Verbatim blocks start at (optional title) + colon and end with parentheses containing an optional label. Verbatim blocks don't have to be about programming, really.
    
    The Famous Quote: 

        To be or not to be.
                        Shakespeare, William

    (quote)

    The block above has "The Famous Quote" for the title, and it's label is "quote".

    Do not forget: 

        The universe tends towards maximum irony, don't push it.
    (jwz)

    In the case above, "Do not forget " is the title and it has "jwz", the author as a label
    And the block can have neither: 

    :
        This is a very anonymous block
    ()

    Or the label only.

    :
        console.log("get me out of here");
    (javascript)

    
3.2 Stretched

    Since document nesting will consume space, for some verbatim blocks, it is beneficial to have as large a width as possible. Tables, for example, like to use as much space as possible. In this case: 

    - Both start and end markers (title: and label: ) appear as before,  indented on the session they belong to.
    - the content vertical baseline becomes absolute 0, that is , at the first character

    Let's see this in action.

    This is a stretched verbatim block:
| Element Name                           |  Inner Indentation                       |
|-------------------------------------------|--------------------------------------------|
| Verbatim Blocks > stretched      | absolute 0                                   | 
| Verbatim Blocks > in-flow           |  1+ from the label                       |
    (Markdown table)

    Termination for stretched blocks follows the same rule as in-flow blocks: a closing colon marker at the same indentation level as the opening line.
    The opening of the block, with the label is normal flow positioned, since we need to know to which level / element the block belongs to. Were the label also at absolute 0, we couldn't tell.

3.3 On Labels and Parameters

    Labels can be any alphanumerical non-breaking character, but are optional. The label is everything before the final colon on the line.

    Additionally, `txxt` supports key-value parameters on the same line as the label. This is useful for providing extra metadata to processing tools.

    The syntax is `label:key=value,key2=value2:`. If there is no label, the syntax is `:key=value:`.

    Example with parameters:
        A code block with a version hint:
            print("Hello, txxt!")
        (python: version=3)
    (txxt)

    For a complete guide to indentation, termination, and other advanced rules, please see the specs on this topic [../specs/blocks-edge-cases.txxt]. For specifics on label syntax and parsing rationale, see the [../specs/verbatim-blocks-details.txxt].

3.4 Media

    While txxt is a plain text format, it provides a structured way to reference media, allowing tools and formatters to embed them in final outputs like HTML or PDF.

    Media are represented using verbatim blocks with a reserved label (`image`, `video`, `audio`, or `media`). The path or URL to the media is provided as a block parameter.

    The general form uses a verbatim block with the `media` type and the resource path as a parameter.

        <optional caption>:
        <image|video|audio|media>:src=path/or/url/to/image:

    Example:

        A beautiful landscape:
        (image: src=[/images/landscape.jpg])

    In this example:
    - The block's title, "A beautiful landscape", serves as the image caption.
    - The block's label is `image`, signaling to tools how to handle it.
    - The parameter `src` provides the path to the image file, using the reference syntax.

    This approach keeps txxt as a pure text format while providing structured metadata for tools to process media appropriately.

3.5. Definitions

    Definitions provide a structured way to define terms in txxt documents. They use a double colon (::) syntax to distinguish them from verbatim blocks.

    Term ::
        The definition content is indented one level from the term. It can 
        contain any txxt content including paragraphs, lists, and even 
        nested verbatim blocks.

    Complex Definition ::
        Definitions can span multiple paragraphs.
        
        They can include lists:
        - First point
        - Second point
        
        And even code examples:
            def example():
                return 42
        (python)

    Key features:
    - The term line ends with double colon (::)
    - Definition content is indented one level
    - Definitions end when indentation returns to the term level or less
    - The double colon distinguishes definitions from verbatim blocks (single colon)
    - Terms can contain any text except line breaks

4. Structure: sessions  

    txxt documents are organized into arbitrarily nested sessions.
    Sessions consist of a title (stored as an attribute) and content. A line becomes a session title when it is preceded by a blank line AND followed by indented content.

    Session Recognition Rule:
    - Preceded by blank line (or start of document)
    - Followed by content indented +1 relative to the title
    - If these conditions aren't met, the line is parsed as a paragraph

    4.1 Sub Section A

        Its content is +1 from the title

        - This is true for lists
        - All types of lists

        Also for verbatim blocks: 
            console.log("indentation is hard, let's go shopping");
        (javascript) 

        :: comment :: Even the mighty annotation needs to abide

    4.2 Sub Section B

        4.2.1 Here the first element is another session

            Whose content is +1

        :: note :: The line below has no indented content, so it's a paragraph
        4.2.2 I am a paragraph (no indented content follows me)

5. Advanced Rules and Edge Cases

    The `txxt` format has a number of rules to handle ambiguous situations, such as distinguishing a session title from a paragraph, or a list item from a line of dialog.

    For a complete guide to these topics, including list indentation, mixed markers, and blank lines in lists, please see the specs on this topic [../specs/blocks-edge-cases.txxt].
