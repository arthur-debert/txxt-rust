:: title :: txxt Specification: General Principles
:: author :: Arthur Debert (Original), Gemini (Refactor)
:: pub-date :: 2025-09-23

This document covers the general principles of the txxt format, including character encoding, whitespace, and annotations.

txxt is a plain text format, designed for a high level of expressivness, including complex concepts like nested structures and relationships that relies heavily on visual , non formal elements and a long heritagy of plain text conventions resulting in a format that is easy to read and write without tollls and has low cognitive load for parsing.


1. Character Encoding,  Whitespace and Indentation

    Much of the pwer and usability of txxt derives from being an indentation signitifcant format.
    In txxt, indentation conveys structure, that is parent/child relationships and start and boundaries for foreign formats representation (verbatim blocks).

    1.1 Indentation

        Indentation is used to mark a session's content or a list item's nested content.
        This paragraph is indented +1 from its session title. 

        Hence, indentation increases are always sequential (you can create a sub setcion without a parent), but decrease can jump (because we can, say, end session 1.3.3 and go to session 2)
        
        1.1.1  Tab Handling

            - Tab characters are converted to spaces
            - One tab = 4 spaces 
            - Mixing tabs and spaces for indentation in the same file should be avoided, but the parser will normalize these.
            - Incorrect number of spaces is an error an may exit parsing..

    1.2. Character Encoding

        - All text must be UTF-8 encoded
        - Line endings must use Unix convention (LF, not CRLF)
        - No maximum line length is enforced by the parser, left at the discretion of tooling on publishing workflows.

    1.3. Blank Lines

        Blank lines are handled as this: 
        - In verbatim blocks: 
        - All blank lines are preserved exactly.
        Elsewhere: 
        - Whitespace is stripped.
        - Multiple sequential blank lines: Collapsed to a single blank line , which is preserved.

2. Escaping

    To display a character that has a special meaning in `txxt` syntax as a literal character, you can escape it with a backslash (`\`). The backslash removes the special meaning from the character immediately following it.

    This is useful for:
    - Preventing inline formatting: `\*not bold\*` will appear as *not bold*.
    - Showing block markers literally: `\- Not a list item` will not be parsed as a list.
    - Using special characters in verbatim parameters: `media: alt="A wide shot\\, with clouds":`
    - Displaying a literal backslash: `\\` will appear as a single `\`.

    The escaping is handled in a preprocessing step, which means it works consistently across the entire document.

3. Annotations

    Annotations are directives that attach metadata to document elements. They are not part of the main content and are often omitted in exporting workflows following tool discretion.

    :: note:: Througout these documents , you wil see many annotations adding additonal information, like hints,  such as this one.

    3.1. Syntax

        Since pragmas are used to store arbitrary data, an annotation has a label (the name for that data) and its content (the data itself). Annotations use txxt's double-colon (::) marker to encode the pragma's label and separate it from its content.

        Basic form:
        :: label :: content
        :: form :: Annotations have a label and content. Anything between the double-colons (`::`) markers is the label (whitespace trimmed), and anything after the last marker is the content.
        
        With parameters:
        :: label:key=value,key2="quoted value" :: content
        :: form-with-params :: Labels can include parameters using the same syntax as verbatim blocks. Parameters are key-value pairs separated by commas.
        
        Special form for longer content:
        :: multiline ::
            If an annotation has no content but is followed by an indented block, that block becomes the annotation's content.
        
        Parameters work with multiline too:
        :: warning:severity=high ::
            This is a high severity warning
            that spans multiple lines.
        
        These are less useful, but legal:
        :: empty content annotation ::
        :: :: And this is an annotation with an empty label.
        
        Namespaced labels:
        :: org.example.meta:version=2.0 :: Metadata with namespace
        :: form-namespace :: Labels can use dots to create namespaces. The txxt. namespace is reserved for official use.

    2.2. Attachment Rules

        
        Annotations are grouped into blocks, in which multiple sequential annotations are  joined.  A annotation block attaches its metadata to the *next* non-annotation element that follows it.

        - If there is no following element, the annotations attach to their parent element (the session or document they are inside).
        - A annotation block ends as soon as a non-annotation element (like a paragraph or session title) is found.

    2.3. Example

        Here is a simple example of annotations attached to a paragraph:
        
        :
            :: author :: John Doe
            :: date :: 2025-01-01
            
            This paragraph has the above annotations attached.
        :

    2.4 Semantics

        Annotations are design to be very flexible. Labels are not unique, even within the same annotation block, as the latter is structured as a list of annotations.

    Annotations are used in these specs to convey comments or additional annotations.

    For more detailed rules, such as block boundary requirements, please see the deep-dive on this topic [../deep-dive/annotation-details.txxt].